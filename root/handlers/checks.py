import asyncio
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from config import dp, bot, base, admins

from keyboards.client import *
from states.client import *
from states.forms import *

@dp.message_handler(content_types=['location'])
async def get_free_checks(message: types.Message, state: FSMContext):
    user_longitude = message.location.longitude
    user_latitude = message.location.latitude
    longitude1 = user_longitude - 1.5
    longitude2 = user_longitude + 1.5
    latitude1 = user_latitude - 1.5
    latitude2 = user_latitude + 1.5
    checks = await base.get_available_checks(latitude1, longitude1, latitude2, longitude2)
    names = {"mts": "–°–∞–ª–æ–Ω —Å–≤—è–∑–∏", "sokolov": "–Æ–≤–µ–ª–∏—Ä–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", "gate31": "–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", "irbis": "–ê–ó–°",
             "kastorama": "–ì–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "muztorg": "–ú–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
             "subway": "–†–µ—Å—Ç–æ—Ä–∞–Ω –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", "ildebote": "–ü—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–æ—Å–º–µ—Ç–∏–∫–∏", "petshop": "–ú–∞–≥–∞–∑–∏–Ω—ã –∑–æ–æ—Ç–æ–≤–∞—Ä–æ–≤", "rivgosh": "–ú–∞–≥–∞–∑–∏–Ω—ã –∫–æ—Å–º–µ—Ç–∏–∫–∏",
             "torti": "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω", "domix": "–ú–∞–≥–∞–∑–∏–Ω –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π", "informat": "–ú–∞–≥–∞–∑–∏–Ω –∫–∞–Ω—Ü. —Ç–æ–≤–∞—Ä–æ–≤", "lexmer": "–ú–∞–≥–∞–∑–∏–Ω –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "respect": "–ú–∞–≥–∞–∑–∏–Ω –æ–±—É–≤–∏",
             "nebar": "–ë–∞—Ä", "4paws": "–ú–∞–≥–∞–∑–∏–Ω—ã –∑–æ–æ—Ç–æ–≤–∞—Ä–æ–≤"}
    if len(checks):
        await message.answer("üìå<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä—è–¥–æ–º —Å –≤–∞–º–∏</b>", reply_markup=check_kb)
        for check in checks:
            await message.answer(f"<b>üìé–ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <code>{check[0]}</code>\n"
                                 f"<b>üìç–ê–¥—Ä–µ—Å:</b> {check[1]}\n"
                                 f"<b>üàö–¢–∏–ø:</b> {names[check[3]]}\n"
                                 f"<b>üí≤–û–ø–ª–∞—Ç–∞:</b> {check[2]}", reply_markup=await get_detail_check_kb(check[3]))
            await asyncio.sleep(0.2)
    else:
        await message.answer("<b>‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>")

@dp.callback_query_handler(Text(startswith="show_"))
async def show_check_detail(call: types.CallbackQuery):
    details = {"kastorama": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç–¥–µ–ª–∞—Ö, –ø–æ–∫—É–ø–∫–∞ –æ—Ç 40 —Ä—É–±–ª–µ–π",
               "rivgosh": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ + –ø–æ–∫—É–ø–∫–∞ –æ—Ç 200 —Ä—É–±–ª–µ–π", "subway": "–û—Ü–µ–Ω–∫–∞ –∫–∞—Ñ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ–∫—É–ø–∫–∞ —Å—ç–Ω–¥–≤–∏—á–∞+ –Ω–∞–ø–∏—Ç–∫–∞ –∑–∞ 320 —Ä—É–±–ª–µ–π",
               "petshop": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ+–ø–æ–∫—É–ø–∫–∞ –Ω–∞ 600 —Ä—É–±–ª–µ–π", "lexmer": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ", "gate31": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ, –ø–æ–∫—É–ø–∫–∞-–≤–æ–∑–≤—Ä–∞—Ç",
               "respect": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ —Å –ø—Ä–∏–º–µ—Ä–∫–æ–π, –ø–æ–∫—É–ø–∫–∞-–≤–æ–∑–≤—Ä–∞—Ç", "4paws": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ + –ø–æ–∫—É–ø–∫–∞ –æ—Ç 150 —Ä—É–±–ª–µ–π",
               "informat": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è  –ø–æ –ª–µ–≥–µ–Ω–¥–µ —Å –ø–æ–∫—É–ø–∫–æ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∏", "torti": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ",
               "domix": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ", "nebar": "–í–∏–∑–∏—Ç –≤ –±–∞—Ä, –∑–∞–∫–∞–∑ –∫–æ–∫—Ç–µ–π–ª—è, –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
               "pompa": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ", "tissot": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–µ–Ω–¥–µ —Å –ø—Ä–∏–º–µ—Ä–∫–æ–π"}
    company = call.data.split("_")[1]
    await call.message.edit_text(call.message.text + f"\n\nüìã–û–ø–∏—Å–∞–Ω–∏–µ: <b>{details[company]}</b>")

@dp.message_handler(Text("üìé–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"))
async def appoint_check(message: types.Message, state: FSMContext):
    await message.answer("<b>üî¢–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏</b>", reply_markup=cancel_kb)
    await FSMassignation.number.set()

@dp.message_handler(state=FSMassignation.number)
async def get_appoint_number(message: types.Message, state: FSMContext):
    try:
        is_check_assignated = await base.assignate_check(message.from_user.id, int(message.text))
        if is_check_assignated:
            await message.answer(f"<b>‚úÖ–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{message.text}</code> —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>")
            company = await base.get_check_company(message.text)
            await message.answer_document(open(f'instructions/{company}.docx', 'rb'), caption="<b>üìÑ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>")
            await base.add_log(message.from_user.id, message.text, '–ù–∞–∑–Ω–∞—á–∏–ª', company)
        else:
            await message.answer(f"<b>‚ùå–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–∞ –Ω–µ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω –¥—Ä—É–≥–æ–π –¢–ü</b>")
    except ValueError as e:
        await message.answer("<b>‚ùå–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>")
        print(e)
    finally:
        await state.finish()

@dp.message_handler(Text("üìÑ–ú–æ–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"))
async def get_user_checks(message: types.Message, state: FSMContext):
    user_checks = await base.get_user_checks(int(message.from_user.id))
    if len(user_checks):
        await message.answer("<b>üìî–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>", reply_markup=my_checks_kb)
        for check in user_checks:
            await message.answer(f"<b>üìé–ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <code>{check[0]}</code>\n"
                                 f"<b>üìç–ê–¥—Ä–µ—Å:</b> {check[1]}\n", reply_markup=await get_cancel_check_kb(check[0]))
    else:
        await message.answer("<b>‚ùå–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫</b>")

@dp.callback_query_handler(Text(startswith="uncheck_"))
async def cancel_check(call: types.CallbackQuery):
    check_id = call.data.split("_")[1]
    await base.cancel_check(check_id)
    await call.message.edit_text("‚úÖ–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    company = await base.get_check_company(check_id)
    await base.add_log(call.from_user.id, check_id, '–û—Ç–º–µ–Ω–∏–ª', company)

@dp.message_handler(Text("üìã–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
async def fill_form(message: types.Message, state: FSMContext):
    await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏</b>", reply_markup=cancel_kb)
    await FSMgetnumberofcheck.number.set()

@dp.message_handler(state=FSMgetnumberofcheck.number)
async def get_number_of_check_to_fill(message: types.Message, state: FSMContext):
    companies_states = {"mts": FSMmts.date, "sokolov": FSMsokolov.date, "gate31": FSMgate31.date, "irbis": FSMirbis.date, "muztorg": FSMmuztorg.date,
                        "kastorama": FSMkastorama.date, "subway": FSMsubway.date, "torti": FSMtorti.info1, "domix": FSMdomix.info1, "informat": FSMinformat.info1,
                        "lexmer": FSMlexmer.info1}
    try:
        company = await base.is_user_have_check(message.from_user.id, int(message.text))
        await companies_states[company].set()
        async with state.proxy() as data_check:
            data_check['company'] = company
            data_check['user_id'] = message.from_user.id
            data_check['number'] = int(message.text)
            data_check['date_time'] = datetime.now()
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏</b>")
        await asyncio.sleep(300)
        if 'date' not in (await state.get_data()).keys():
            await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")
    except ValueError:
        await message.answer("<b>‚ùå–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>")
        await state.finish()

@dp.message_handler(state=FSMsokolov.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMsokolov.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.time_start and 'time_start' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.time_start)
async def getting_time_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time_start'] = message.text
    await FSMsokolov.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMsokolov.next()
    await message.answer('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.name_worker and 'worker_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.name_worker)
async def getting_fio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_name'] = message.text
    await FSMsokolov.next()
    await message.answer("–¢–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –≤ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω")
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.number_workers and 'worker_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.number_workers)
async def getting_worker_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_count'] = message.text
    await FSMsokolov.next()
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π (–∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞) –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –≤ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω")
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.number_clients and 'client_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsokolov.number_clients)
async def getting_client_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['client_count'] = message.text
        data_check['edit_message_id'] = \
            (await message.answer("–ù–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ (–Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–≤–æ–∏–º –º–∞–∫–∏—è–∂–µ–º –∏ –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –ø–∏—â—É)",
                                  reply_markup=grade_kb)).message_id
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_job and 'worker_job' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_job)
async def getting_worker_job(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_job'] = call.data.split("_")[1]
        await call.message.edit_text("–ü—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π", reply_markup=grade_kb)
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_substrate and 'worker_substrate' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_substrate)
async def getting_worker_substrate(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_substrate'] = call.data.split("_")[1]
        await call.message.edit_text("–ü—Ä–æ–¥–∞–≤–µ—Ü –±—ã–ª –≤–æ–≤–ª–µ—á–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —Ö–æ—Ç–µ–ª –ø–æ–º–æ—á—å, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª –∫ —Å–µ–±–µ, "
                                     "–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —É–ª—ã–±–∞–ª—Å—è. –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö", reply_markup=grade_kb)
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_friendliness and 'worker_friendliness' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_friendliness)
async def getting_worker_friendliness(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_friendliness'] = call.data.split("_")[1]
        await call.message.edit_text("–ü–æ –∏—Ç–æ–≥–∞–º –≤–∏–∑–∏—Ç–∞ —Å–ª–æ–∂–∏–ª–æ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö", reply_markup=grade_kb)
    await FSMsokolov.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsokolov.worker_service and 'worker_service' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsokolov.worker_service)
async def getting_worker_service(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_service'] = call.data.split("_")[1]
        await base.add_log(call.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "sokolov")
        await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check['number']} - –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
    await base.add_check("sokolov", state)
    await state.finish()


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=FSMsokolov.audio)
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMmts.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMmts.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.time_start and 'time_start' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.time_start)
async def getting_time_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time_start'] = message.text
    await FSMmts.next()
    await message.answer('–°–∞–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.rezgim and 'rezgim' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.rezgim)
async def getting_rezgim(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['rezgim'] = message.text
    await FSMmts.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.number_workers and 'number_workers' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.number_workers)
async def getting_number_workers(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['number_workers'] = int(message.text)
    await FSMmts.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.number_clients and 'number_clients' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.number_clients)
async def getting_number_clients(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['number_clients'] = int(message.text)
    await FSMmts.next()
    await message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –ò–º—è –∏ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ: –Ω–µ –ø–æ–º–Ω—é. –§–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.name_worker and 'name_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.name_worker)
async def getting_name_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['name_worker'] = message.text
    await FSMmts.next()
    await message.answer('–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.describe_worker and 'describe_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.describe_worker)
async def getting_describe_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['describe_worker'] = message.text
    await FSMmts.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤–∏–∑–∏—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.resume and 'resume' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.resume)
async def getting_resume(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['resume'] = message.text
    await FSMmts.next()
    await message.answer('–ü—Ä–∏—à–∏–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMmts.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.photo1 and 'photo1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.photo1, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo1'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmts.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmts.photo2 and 'photo2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmts.photo2, content_types=types.ContentType.PHOTO)
async def getting_photo2(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
        await base.add_log(message.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "mts")
    await base.add_check("mts", state)
    await message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=[FSMmts.photo2, FSMmts.photo1])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=FSMmts.audio)
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMgate31.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMgate31.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMgate31.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.photo and 'photo' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.photo, content_types=types.ContentType.PHOTO)
async def getting_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMgate31.next()
    await message.answer("–§–ò–û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)")
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.operator_name and 'operator_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.operator_name)
async def getting_operator_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['operator_name'] = message.text
    await FSMgate31.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –≤—ã–≤–µ—Å–∫—É, –≤—Ö–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É, –≤–∏—Ç—Ä–∏–Ω—ã, –º–∞–Ω–µ–∫–µ–Ω—ã, —á–∏—Å—Ç–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.outside and 'outside' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.outside)
async def getting_outside(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['outside'] = message.text
    await FSMgate31.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª, –ø—Ä–∏–º–µ—Ä–æ—á–Ω—ã–µ, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —á–∏—Å—Ç–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    if await state.get_state() == FSMgate31.inside and 'inside' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.inside)
async def getting_inside(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['inside'] = message.text
    await FSMgate31.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.describe_worker and 'describe_worker' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.describe_worker)
async def getting_describe_worker(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['describe_worker'] = message.text
    await message.answer("–¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç –æ–ø—Ä—è—Ç–Ω—ã–π –≤–∏–¥, –∏–º–µ—é—Ç—Å—è –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.product_appearance and 'product_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.product_appearance)
async def getting_product_appearance(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['product_appearance'] = message.text
        await message.answer("–í –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∂–∫–∞ –¥–ª—è –æ–±—É–≤–∏ –∏ –≤–µ—à–∞–ª–∫–∞", reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.spoon and 'spoon' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.spoon)
async def getting_spoon(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['spoon'] = message.text
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_count and 'worker_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.worker_count)
async def getting_worker_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_count'] = message.text
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.client_count and 'client_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.client_count)
async def getting_client_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['client_count'] = message.text
        await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—Å —Å —É–ª—ã–±–∫–æ–π", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_friendliess and 'consultant_friendliess' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_friendliess)
async def getting_consultant_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏–ª –¥–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π ", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_fitting and 'consultant_fitting' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_fitting)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_fitting'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–∞–º –æ—Ç–Ω–µ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø—Ä–∏–º–µ—Ä–æ—á–Ω—É—é", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_products and 'consultant_products' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_products)
async def getting_consultant_products(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_products'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≤–µ–ª –∫ –∫–∞—Å—Å–æ–≤–æ–π –∑–æ–Ω–µ", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_cash and 'consultant_cash' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_cash)
async def getting_consultant_cash(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_cash'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–æ–∂–¥–∞–ª—Å—è –æ–ø–ª–∞—Ç—ã (–¥–ª—è —É–Ω–∏–≤–µ—Ä–º–∞–≥–∞ "–¶–≤–µ—Ç–Ω–æ–π", –¢–†–¶ "–ê–≤–∏–∞–ø–∞—Ä–∫", –¢–¶ "–ú–ï–ì–ê –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω")', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_payment and 'consultant_payment' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_payment)
async def getting_consultant_payment(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_payment'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –æ–±—Å–ª—É–∂–∏–≤–∞–ª —Ç–æ—Ç –∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, —á—Ç–æ –ø—Ä–æ–≤–æ–¥–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_same and 'consultant_same' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_same)
async def getting_consultant_same(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_same'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ò–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –ø–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π ")
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.duty_name and 'duty_name' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.duty_name)
async def getting_duty_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['duty_name'] = message.text
        await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç/–¥–µ–∂—É—Ä–Ω—ã–π –ø–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—â–µ–π –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ—Ä–∫–∏", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_product_count and 'consultant_product_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_product_count)
async def getting_consultant_product_count(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_product_count'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç/–¥–µ–∂—É—Ä–Ω—ã–π –ø–æ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_closeness and 'consultant_closeness' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_closeness)
async def getting_consultant_closeness(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_closeness'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–§–ò–û –∫–∞—Å—Å–∏—Ä–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_name and 'cashier_name' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.cashier_name)
async def getting_cashier_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_name'] = message.text
        await message.answer("–ö–∞—Å—Å–∏—Ä –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—Å —Å —É–ª—ã–±–∫–æ–π", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_friendliess and 'cashier_friendliess' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_friendliess)
async def getting_cashier_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–∞—Å—Å–∏—Ä/–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–≤–µ—Ä–Ω—É–ª –ø–æ–∫—É–ø–∫—É –≤ –∫–∞–ª—å–∫—É (—É–ø–∞–∫–æ–≤–æ—á–Ω—É—é –±—É–º–∞–≥—É) –∏ –ø–æ–ª–æ–∂–∏–ª –≤ –ø–∞–∫–µ—Ç', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_paper and 'cashier_paper' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.cashier_paper)
async def getting_cashier_paper(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_paper'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–∞—Å—Å–∏—Ä/–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª –ø–∞–∫–µ—Ç –≤ —Ä—É–∫–∏, –≤—ã–π–¥—è –∏–∑-–∑–∞ –∫–∞—Å—Å—ã (–Ω–µ —á–µ—Ä–µ–∑ –∫–∞—Å—Å–æ–≤—É—é —Å—Ç–æ–π–∫—É)', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.cashier_handed and 'cashier_handed' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.cashier_handed)
async def getting_cashier_handed(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_handed'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.general_impression and 'general_impression' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.general_impression)
async def getting_general_impression(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['general_impression'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_friendliess and 'worker_friendliess' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_friendliess)
async def getting_worker_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.consultant_activity and 'consultant_activity' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.consultant_activity)
async def getting_consultant_activity(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_activity'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_competence and 'worker_competence' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_competence)
async def getting_worker_competence(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_competence'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_persistence and 'worker_persistence' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_persistence)
async def getting_worker_persistence(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_persistence'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–¥–µ–ª–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∫–∏', reply_markup=grade_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.worker_time and 'worker_time' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.worker_time)
async def getting_worker_time(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_time'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ï—Å–ª–∏ –ª–∏ –∂–µ–ª–∞–Ω–∏–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –µ—â–µ –ø–æ–∫—É–ø–∫–∏?', reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.return_desire and 'return_desire' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.return_desire)
async def getting_return_desire(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['return_desire'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø—Ä–æ–≤–æ–¥–∏–≤—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.back_name and 'back_name' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMgate31.back_name)
async def getting_back_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['back_name'] = message.text
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—Å —Å —É–ª—ã–±–∫–æ–π", reply_markup=friendliess_kb)
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.back_friendliess and 'back_friendliess' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.back_friendliess)
async def getting_back_friendliess(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['back_friendliess'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞')
    await FSMgate31.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMgate31.back_main and 'back_main' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMgate31.back_main)
async def getting_back_main(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['back_main'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check['number']} - –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        await base.add_log(call.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "gate31")
    await base.add_check("gate31", state)
    await state.finish()

@dp.message_handler(state=FSMgate31.photo, content_types=[types.ContentType.TEXT, types.ContentType.AUDIO])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMgate31.photo, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMirbis.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMirbis.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMirbis.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.photo and 'photo' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.photo)
async def getting_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMirbis.next()
    await message.answer("–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ê–ó–° (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)")
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.operator_name and 'operator_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.operator_name)
async def getting_operator_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['operator_name'] = message.text
    await FSMirbis.next()
    await message.answer("–ò–º—è –∑–∞–ø—Ä–∞–≤—â–∏–∫–∞ –ê–ó–° (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)")
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.azs_name and 'azs_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.azs_name)
async def getting_azs_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['azs_name'] = message.text
    await FSMirbis.next()
    await message.answer("–ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏")
    if await state.get_state() == FSMirbis.column and 'column' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.column)
async def getting_column(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['column'] = message.text
    await FSMirbis.next()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –ê–ó–° –∏ —Ç–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª. –í–µ–∑–¥–µ –ª–∏ –±—ã–ª–æ —á–∏—Å—Ç–æ, –≤—Å—ë –ª–∏ –∏—Å–ø—Ä–∞–≤–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.territory and 'territory' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.territory)
async def getting_territory(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['territory'] = message.text
    await message.answer("–¢—É–∞–ª–µ—Ç —á–∏—Å—Ç—ã–π, –≤ —Ç—É–∞–ª–µ—Ç–µ —Ö–æ—Ä–æ—à–∏–π –∑–∞–ø–∞—Ö, –≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.sanuzel and 'sanuzel' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.sanuzel)
async def getting_sanuzel(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['sanuzel'] = message.text
        await message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ?", reply_markup=grade_kb)
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.situation and 'situation' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMirbis.situation)
async def getting_situation(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['situation'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –±—ã –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.object_tips and 'object_tips' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.object_tips)
async def getting_object_tips(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['object_tips'] = message.text
        await message.answer("–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.main_problem and 'main_problem' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.main_problem)
async def getting_main_problem(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['main_problem'] = message.text
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Ä–∞–±–æ—Ç—É –∑–∞–ø—Ä–∞–≤—â–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.filler_job and 'filler_job' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.filler_job)
async def getting_filler_job(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['filler_job'] = message.text
        await message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã —ç—Ç–∞–ø–æ–º –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=grade_kb)
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.fill and 'fill' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMirbis.fill)
async def getting_fill(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['fill'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –±—ã –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.fill_tips and 'fill_tips' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.fill_tips)
async def getting_fill_tips(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['fill_tips'] = message.text
        await message.answer("–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å? ")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.fill_problem and 'fill_problem' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.fill_problem)
async def getting_fill_problem(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['fill_problem'] = message.text
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_appearance and 'cashier_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.cashier_appearance)
async def getting_cashier_appearance(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_appearance'] = message.text
        await message.answer("–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ä–∞–±–æ—Ç–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞?", reply_markup=grade_kb)
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_job and 'cashier_job' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMirbis.cashier_job)
async def getting_cashier_job(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_job'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –±—ã –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Ä–∞–±–æ—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_tips and 'cashier_tips' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.cashier_tips)
async def getting_cashier_tips(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_tips'] = message.text
        await message.answer("–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å –∫–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∫–∞—Å—Å–∏—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å?")
    await FSMirbis.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMirbis.cashier_problem and 'cashies_problem' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMirbis.cashier_problem)
async def getting_cashier_problem(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_problem'] = message.text
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check['number']} - –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        await base.add_log(message.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "irbis")
    await base.add_check("irbis", state)
    await state.finish()

@dp.message_handler(state=FSMirbis.photo, content_types=[types.ContentType.AUDIO, types.ContentType.TEXT])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMirbis.photo, content_types=[types.ContentType.PHOTO, types.ContentType.TEXT])
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMmuztorg.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMmuztorg.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ñ–∞—Å–∞–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.photo1 and 'photo1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.photo1, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo1'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏–π')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.photo2 and 'photo2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.photo2, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_count and 'worker_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_count)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_count'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∑–∞–ª–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.client_count and 'client_count' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.client_count)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['client_count'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–ª')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.sex and 'sex' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.sex)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['sex'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.age and 'age' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.age)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['age'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–¥–æ—à–µ–ª –∫ –í–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç –í–∞—à–µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –µ–≥–æ –ø–æ–ª–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_3_minute and 'worker_3_minute' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_3_minute)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_3_minute'] = message.text
    await FSMmuztorg.next()
    await message.answer('–§–ò–û –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å –±–µ–π–¥–∂)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_name and 'worker_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_name)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_name'] = message.text
    await FSMmuztorg.next()
    await message.answer('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_appearance and 'worker_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_appearance)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_appearance'] = message.text
    await FSMmuztorg.next()
    await message.answer('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.hall_appearance and 'hall_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.hall_appearance)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['hall_appearance'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –±—ã–ª –ø—Ä–∏–≤–µ—Ç–ª–∏–≤ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –í–∞–º, –∫–∞–∫ –∫ –∫–ª–∏–µ–Ω—Ç—É?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.consultant_friendly and 'consultant_friendly' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.consultant_friendly)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_friendly'] = message.text
    await FSMmuztorg.next()
    await message.answer('–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª —Å –í–∞–º–∏?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.other_consultant and 'other_consultant' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.other_consultant)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['other_consultant'] = message.text
    await FSMmuztorg.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.general_impression and 'general_impression' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.general_impression)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['general_impression'] = message.text
    await FSMmuztorg.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.consultant_activity and 'consultant_activity' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.consultant_activity)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['consultant_activity'] = message.text
    await FSMmuztorg.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMmuztorg.worker_competence and 'worker_competence' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMmuztorg.worker_competence)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_competence'] = message.text
        await base.add_log(message.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "muztorg")
    await base.add_check("muztorg", state)
    await message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=[FSMmuztorg.photo2, FSMmuztorg.photo1])
async def photo_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO], state=FSMmuztorg.audio)
async def audio_loop(message: types.Message, state: FSMContext):
    message_id = (await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ")).message_id
    await asyncio.sleep(5)
    await bot.delete_message(message.from_user.id, message_id)

@dp.message_handler(state=FSMkastorama.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMkastorama.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.time and 'time' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.time)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time'] = message.text
    await FSMkastorama.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMmts.next()
    await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.photo and 'photo' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.photo, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMmts.next()
    await message.answer('–ü–∞—Ä–∫–æ–≤–∫–∞ —á–∏—Å—Ç–∞—è (–Ω–µ—Ç –º—É—Å–æ—Ä–∞, –Ω–µ—Ç —Ç–µ–ª–µ–∂–µ–∫ –Ω–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, —É–±—Ä–∞–Ω–æ –æ—Ç —Å–Ω–µ–≥–∞)', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.parking_clear and 'parking_clear' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.parking_clear)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['parking_clear'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–∞ –ø–∞—Ä–∫–æ–≤–∫–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.parking_free and 'parking_free' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.parking_free)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['parking_free'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–∞ –≤—Ö–æ–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–ª–µ–∂–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–æ–≤", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.carts and 'carts' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.carts)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['carts'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í —Ç—É–∞–ª–µ—Ç–∞—Ö —á–∏—Å—Ç–æ", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.toilets_clear and 'toilets_clear' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.toilets_clear)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['toilets_clear'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ó–∞–º–∫–∏ –≤–æ –≤—Å–µ—Ö —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö –∫–∞–±–∏–Ω–∫–∞—Ö —Ü–µ–ª—ã–µ", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.zamki and 'zamki' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.zamki)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['zamki'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í—Å—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.santehnika and 'santehnika' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.santehnika)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['santehnika'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–õ–µ–≥–∫–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏ –∑–∞–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–∫–∞–∑—ã", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.info and 'info' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.info)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü–æ –≥–ª–∞–≤–Ω–æ–π –∞–ª–ª–µ–µ –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è —Å —Ç–µ–ª–µ–∂–∫–æ–π", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cart_alley and 'cart_alley' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cart_alley)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cart_alley'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ ‚Ññ –∫–∞—Å—Å–æ–≤–æ–≥–æ —É–∑–ª–∞", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cash_number and 'cash_number' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cash_number)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cash_number'] = message.text
    await FSMkastorama.next()
    await message.answer('–§–ò–û –∫–∞—Å—Å–∏—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_name and 'cashier_name' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cashier_name)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_name'] = message.text
    await FSMkastorama.next()
    await message.answer('–ö–∞–∫–æ–π –í—ã –ø–æ —Å—á–µ—Ç—É –≤ –æ—á–µ—Ä–µ–¥–∏?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.queue_number and 'queue_number' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.queue_number)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['queue_number'] = message.text
    await FSMkastorama.next()
    await message.answer('–ó–∞—Å–µ–∫–∏—Ç–µ –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –≤ –∫–∞—Å—Å—É –∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –∫–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –í–∞–º —á–µ–∫ (–º–∏–Ω.)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.queue_time and 'queue_time' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.queue_time)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['queue_time'] = message.text
    await FSMkastorama.next()
    await message.answer('–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–∞—Å—Å–∏—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –±–µ–π–¥–∂ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ñ–æ—Ä–º–∞ —á–∏—Å—Ç–∞—è, –æ—Ç–≥–ª–∞–∂–µ–Ω–Ω–∞—è. –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_appearance and 'cashier_appearance' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cashier_appearance)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_appearance'] = message.text
    await FSMkastorama.next()
    await message.answer('–†–∞–±–æ—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ –í–∞—Å)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.worker_job_client and 'worker_job_client' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.worker_job_client)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['worker_job_client'] = message.text
    await FSMkastorama.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ –≤–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –≤—ã–ª–æ–∂–∏–≤ –µ–≥–æ –Ω–∞ –∫–∞—Å—Å–æ–≤—ã–π –ø—Ä–∏–ª–∞–≤–æ–∫ (–∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Ç–µ–ª–µ–∂–∫–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –∫ –∫–∞—Å—Å–∏—Ä—É)', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_correctly and 'cashier_correctly' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_correctly)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_correctly'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–õ–µ–≥–∫–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏ –∑–∞–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–∫–∞–∑—ã", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_barcode and 'cashier_barcode' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_correctly)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_correctly'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –ò–õ–ò –≤–≤–µ–ª —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é, –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å–∫–∞–Ω–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_barcode and 'cashier_barcode' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_barcode)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_barcode'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∫–∞—Å—Å–∏—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞—Ö –∫—É–ø—é—Ä –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ø—é—Ä—ã ¬´–Ω–∞ –æ—â—É–ø—å¬ª", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_solvency and 'cashier_solvency' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_solvency)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_solvency'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª —Å–¥–∞—á—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å —á–µ–∫–æ–º", reply_markup=kastorama_kb)
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_change and 'cashier_change' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_change)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_change'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–†–∞–±–æ—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ü—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –í–∞—Å)")
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_job_user and 'cashier_job_user' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMkastorama.cashier_job_user)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_job_user'] = message.text
    await FSMkastorama.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_positive and 'cashier_positive' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_positive)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_change'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_help and 'cashier_help' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_help)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_help'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–£–ª—ã–±–∞–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ò–õ–ò –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –±–µ–∑ —è–≤–Ω–æ–π –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–π —É–ª—ã–±–∫–∏")
    await FSMkastorama.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMkastorama.cashier_benevolence and 'cashier_benevolence' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMkastorama.cashier_help)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['cashier_benevolence'] = call.data.split("_")[1]
        await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ. –ê–Ω–∫–µ—Ç–∞ - {data_check['number']} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        await base.add_check("kastorama", data_check)
        await base.add_log(call.from_user.id, data_check['number'], "–í—ã–ø–æ–ª–Ω–∏–ª", "kastorama")
    await state.finish()

@dp.message_handler(state=FSMsubway.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMsubway.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.time and 'time' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.time)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time'] = message.text
    await FSMsubway.next()
    await message.answer('–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–§–æ—Ç–æ —á–µ–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.photo1 and 'photo1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.photo1, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo1'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–§–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.photo2 and 'photo2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.photo2, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–§–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.photo3 and 'photo3' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.photo3, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo3'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–§–æ—Ç–æ/—Å–∫–∞–Ω —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç –∏ —Ñ–æ—Ç–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ —Ñ–∞—Å–∞–¥–µ –∑–¥–∞–Ω–∏—è/–¢–¶')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.photo4 and 'photo4' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.photo4, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo4'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–§–æ—Ç–æ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.photo5 and 'photo5' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.photo5, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo5'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–§–æ—Ç–æ –∑–æ–Ω—ã –≤—ã–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.photo6 and 'photo6' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.photo6, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['photo6'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMsubway.next()
    await message.answer('–°—É–º–º–∞ –ø–æ —á–µ–∫—É')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info1 and 'info1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info1)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info1'] = message.text
    await FSMsubway.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info2 and 'info2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info2)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info2'] = message.text
    await FSMsubway.next()
    await message.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –í—ã –±—ã–≤–∞–µ—Ç–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö Subway?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info3 and 'info3' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info3)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info3'] = message.text
    await FSMsubway.next()
    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –í—ã –ú–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º Subway –¥–æ –≤–∏–∑–∏—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¢–∞–π–Ω–æ–≥–æ –≥–æ—Å—Ç—è?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info4 and 'info4' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info4)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info4'] = message.text
    await FSMsubway.next()
    await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∑–æ–Ω–µ –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info5 and 'info5' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info5)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info5'] = message.text
    await FSMsubway.next()
    await message.answer('–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–ª (–ò–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info6 and 'info6' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info6)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info6'] = message.text
    await FSMsubway.next()
    await message.answer('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ (2 –∏ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–¥ –í–∞–º–∏), –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞. –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info7 and 'info7' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info7)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info7'] = message.text
    await FSMsubway.next()
    await message.answer('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ (2 –∏ –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–¥ –í–∞–º–∏), –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞. –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info8 and 'info8' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info8)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info8'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info9 and 'info9' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info9)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info9'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info10 and 'info10' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info10)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info10'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info11 and 'info11' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info11)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info12 and 'info12' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info11)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info12 and 'info12' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info12)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info12'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info13 and 'info13' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info13)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info13'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info14 and 'info14' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info14)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info14'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞—Ü–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info15 and 'info15' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info15)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info15'] = message.text
    await FSMsubway.next()
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä (—É–¥–æ–±—Å—Ç–≤–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info16 and 'info16' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info16)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info16'] = message.text
    await FSMsubway.next()
    await message.answer('–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —á–∏—Å—Ç–æ—Ç—ã –≤ –∑–∞–ª–µ –∏ –≤ –ø—Ä–∏–ª–µ–≥–∞—é—â–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info17 and 'info17' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info17)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info17'] = message.text
    await FSMsubway.next()
    await message.answer('–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —á–∏—Å—Ç–æ—Ç—ã –≤ –∑–∞–ª–µ –∏ –≤ –ø—Ä–∏–ª–µ–≥–∞—é—â–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info18 and 'info18' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info18)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info18'] = message.text
    await FSMsubway.next()
    await message.answer('–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —á–∏—Å—Ç–æ—Ç—ã –≤ –∑–∞–ª–µ –∏ –≤ –ø—Ä–∏–ª–µ–≥–∞—é—â–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info19 and 'info19' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info19)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info19'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–¢—É–∞–ª–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –≤—ã–≥–ª—è–¥–µ–ª–∞ —á–∏—Å—Ç–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ª–∏—Å—Ç —É–±–æ—Ä–∫–∏ (–∑–∞–ø–æ–ª–Ω—è–µ–º—ã–π –Ω–∞ –µ–∂–µ—á–∞—Å–Ω–æ–π –æ—Å–Ω–æ–≤–µ) –≤ –Ω–∞–ª–∏—á–∏–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info20 and 'info20' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info20)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info20'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –∑–∞–∫–∞–∑ –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–∞—à–∏–º–∏ –æ–∑–≤—É—á–µ–Ω–Ω—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏. –í —Ö–æ–¥–µ –∑–∞–∫–∞–∑–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∫–∞–∫–∏—Ö-—Ç–æ –æ–≤–æ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –µ–¥–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª—É–∫, –æ–ª–∏–≤–∫–∏) –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–∏—Ö-—Ç–æ –æ–≤–æ—â–µ–π –ø–æ–±–æ–ª—å—à–µ. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫ —Å—ç–Ω–¥–≤–∏—á—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ —Å–æ—É—Å–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–æ—É—Å–∞ –í–∞–º –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å (–ø–æ–±–æ–ª—å—à–µ, –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, –ø–æ–º–µ–Ω—å—à–µ). –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å —Ç–∞–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ì–æ—Å—Ç—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º, —É—Ç–æ—á–Ω—è—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤—Å–µ –ª–∏ —Å–¥–µ–ª–∞–Ω–æ –≤–µ—Ä–Ω–æ.", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info21 and 'info21' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info21)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info21'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –∑–∞–∫–∞–∑ –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–∞—à–∏–º–∏ –æ–∑–≤—É—á–µ–Ω–Ω—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏. –í —Ö–æ–¥–µ –∑–∞–∫–∞–∑–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∫–∞–∫–∏—Ö-—Ç–æ –æ–≤–æ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –µ–¥–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª—É–∫, –æ–ª–∏–≤–∫–∏) –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–∏—Ö-—Ç–æ –æ–≤–æ—â–µ–π –ø–æ–±–æ–ª—å—à–µ. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫ —Å—ç–Ω–¥–≤–∏—á—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ —Å–æ—É—Å–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–æ—É—Å–∞ –í–∞–º –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å (–ø–æ–±–æ–ª—å—à–µ, –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, –ø–æ–º–µ–Ω—å—à–µ). –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å —Ç–∞–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ì–æ—Å—Ç—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º, —É—Ç–æ—á–Ω—è—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤—Å–µ –ª–∏ —Å–¥–µ–ª–∞–Ω–æ –≤–µ—Ä–Ω–æ.", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info22 and 'info22' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info21)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info21'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–æ—Ä—Ü–∏–∏ —Å—ã—Ä–∞ (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info22 and 'info22' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info22)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info22'] = message.text
    await FSMsubway.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –í–∞–º —á–µ–∫', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info23 and 'info23' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info23)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info23'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–¥–∞—á—É, –µ—Å–ª–∏ –≤—ã —Ä–∞—Å–ø–ª–∞—á–∏–≤–∞–ª–∏—Å—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info24 and 'info24' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info24)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info24'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü–µ—Ä–µ—á–µ–Ω—å –±–ª—é–¥ –∏ —Å—É–º–º–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ —á–µ–∫–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info25 and 'info25' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info25)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info25'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –Ω–∞—á–∏—Å–ª–∏–ª –±–∞–ª–ª—ã –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info26 and 'info26' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info26)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info26'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª–æ–∫—É ¬´–ö—É–ª—å—Ç—É—Ä–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è¬ª. –û–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—á–µ—Ç–∞. –ß—Ç–æ –≤ —Ä–∞–±–æ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –Ω–µ—Ç. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info27 and 'info27' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info27)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info27'] = message.text
    await FSMsubway.next()
    await message.answer('–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–æ–Ω–µ –∑–∞–∫–∞–∑–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å—ç–Ω–¥–≤–∏—á–µ–π) –∏ –¥–µ—Å–µ—Ä—Ç—ã –≤ –∫–∞—Å—Å–æ–≤–æ–π –∑–æ–Ω–µ —Å–≤–µ–∂–∏–µ, –≤—ã–ª–æ–∂–µ–Ω—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info28 and 'info28' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info28)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info28'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í –∑–æ–Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –ø—É—Å—Ç—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info29 and 'info29' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info29)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info29'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞–∫–æ–π –≤–∏–¥ —Å–∞–ª–∞—Ç–∞ (–∫–∞–ø—É—Å—Ç—ã) –±—ã–ª –≤ –∑–æ–Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –û–≤–æ—â–Ω–æ–π —Å–µ–∫—Ü–∏–∏")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info30 and 'info30' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info30)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info30'] = message.text
    await FSMsubway.next()
    await message.answer('–ë—ã–ª–∏ –ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∫ —Å—ç–Ω–¥–≤–∏—á—É?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info31 and 'info31' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info31)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info31'] = message.text
    await FSMsubway.next()
    await message.answer('–ï—Å–ª–∏ –≤—ã –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ —Å—ç–Ω–¥–≤–∏—á –ø–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–º, –º—è—Å–Ω–∞—è –Ω–∞—á–∏–Ω–∫–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≥—Ä–µ—Ç–æ–π', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info32 and 'info32' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info32)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info32'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –≤–∫—É—Å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å—ç–Ω–¥–≤–∏—á–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info33 and 'info33' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info33)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info33'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –≤–∫—É—Å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å—ç–Ω–¥–≤–∏—á–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info34 and 'info34' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info34)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info34'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±—ã–ª –æ–ø—Ä—è—Ç–Ω—ã–º, –æ–¥–µ–∂–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–∏—Å—Ç–∞—è. –ë–µ–π–¥–∂ –≤ –Ω–∞–ª–∏—á–∏–∏.", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info35 and 'info35' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info35)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info35'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫–∞—Å—Å–µ –∏–ª–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ –∑–æ–Ω—ã –∫—É—Ö–Ω–∏, –æ–Ω –ø–æ–º—ã–ª/–ø—Ä–æ–¥–µ–∑–∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª —Ä—É–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–µ–≤–∞–Ω–∏–µ–º –ø–µ—Ä—á–∞—Ç–æ–∫ –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º —Å—ç–Ω–¥–≤–∏—á–∞", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info36 and 'info36' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info36)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info36'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã, –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ –≤—Ö–æ–¥–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info37 and 'info37' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info37)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info37'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –í–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–ª —Ç–æ—Ç –∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info38 and 'info38' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info38)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info38'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ë—É–¥–µ—Ç–µ –ª–∏ –í—ã –ø–æ—Å–µ—â–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –≤ –±—É–¥—É—â–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info39 and 'info39' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info39)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info39'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –í–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É —Å–Ω–æ–≤–∞?")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info40 and 'info40' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info40)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info40'] = message.text
    await FSMsubway.next()
    await message.answer('–ü–æ—á–µ–º—É –≤—ã –±—ã –º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–µ –ø–æ—Å–µ—â–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É —Å–Ω–æ–≤–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info41 and 'info41' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info41)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info41'] = message.text
    await FSMsubway.next()
    await message.answer('–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –¥–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –¥—Ä—É–∑—å—è–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º? (–æ—Ü–µ–Ω–∏—Ç–µ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info42 and 'info42' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info42)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info42'] = message.text
    await FSMsubway.next()
    await message.answer('–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –¥–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –¥—Ä—É–∑—å—è–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º? (–æ—Ü–µ–Ω–∏—Ç–µ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info43 and 'info43' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info43)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info42'] = message.text
        await message.answer(f"–°–ø–∞—Å–∏–±–æ. –ê–Ω–∫–µ—Ç–∞ - {data_check['number']} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        await base.add_check("subway", data_check)
        await base.add_log(message.from_user.id, data_check['number'], "–í—ã–ø–æ–ª–Ω–∏–ª", "subway")


@dp.message_handler(state=FSMildebote.date)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['date'] = message.text
    await FSMildebote.next()
    await message.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –§–æ—Ä–º–∞—Ç 17:20')
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.time and 'time' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMildebote.time)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['time'] = message.text
    await FSMildebote.next()
    await message.answer('–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.audio and 'audio' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMildebote.audio, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['audio'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMildebote.next()
    await message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info1 and 'info1' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMildebote.info1)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info1'] = message.text
    await FSMildebote.next()
    await message.answer('–ö–æ–≥–¥–∞ –í—ã –≤–æ—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, —Å –í–∞–º–∏ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ")', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info2 and 'info2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info2)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info2'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–æ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞ –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏, –∞ –Ω–µ –ª–∏—á–Ω—ã–º–∏ (–Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏ –ø–æ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É, –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º, –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info3 and 'info3' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info3)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info3'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ö—Ä–∞–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ: –æ–¥–µ–∂–¥–∞ —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (—Ñ—É—Ç–±–æ–ª–∫–∞, –∏–ª–∏ —Ä—É–±–∞—à–∫–∞, –∏–ª–∏ –ø–∏–¥–∂–∞–∫, –±—Ä—é–∫–∏), —á–∏—Å—Ç–∞—è –Ω–µ –º—è—Ç–∞—è, –±–µ–π–¥–∂, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø—Ä–∏—á—ë—Å–∫–∞", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info4 and 'info4' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info4)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info4'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ö—Ä–∞–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ: –æ–¥–µ–∂–¥–∞ —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (—Ñ—É—Ç–±–æ–ª–∫–∞, –∏–ª–∏ —Ä—É–±–∞—à–∫–∞, –∏–ª–∏ –ø–∏–¥–∂–∞–∫, –±—Ä—é–∫–∏), —á–∏—Å—Ç–∞—è –Ω–µ –º—è—Ç–∞—è, –±–µ–π–¥–∂, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø—Ä–∏—á—ë—Å–∫–∞", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info5 and 'info5' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info5)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info5'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–Ω—É—Ç—Ä–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —á–∏—Å—Ç–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info6 and 'info6' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info6)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info6'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü–æ–ª—ã, —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Å—Ç–µ–ª–ª–∞–∂–∏, —Ç–µ—Å—Ç–µ—Ä —Å—Ç–µ–Ω–¥—ã, —Ç–µ—Å—Ç–µ—Ä—ã —á–∏—Å—Ç—ã–µ", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info7 and 'info7' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info7)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info7'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫–∞—Ö", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info8 and 'info8' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info8)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info8'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–Ω–Ω–∏–∫–∏ –Ω–∞ –≤–µ—Å—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info9 and 'info9' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info9)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info9'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í –º–∞–≥–∞–∑–∏–Ω–µ –∏–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫–∞", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info10 and 'info10' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info10)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info10'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–≥–ª—è–¥–µ–ª –æ–ø—Ä—è—Ç–Ω–æ: –æ–¥–µ—Ç –ø–æ —Ñ–æ—Ä–º–µ (—Ñ—É—Ç–±–æ–ª–∫–∞, –±—Ä—é–∫–∏, –ª—é–±–∞—è –æ–±—É–≤—å —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞). –û–¥–µ–∂–¥–∞ —á–∏—Å—Ç–∞—è, –Ω–µ –º—è—Ç–∞—è. –û–±—É–≤—å —á–∏—Å—Ç–∞—è. –ë–µ–π–¥–∂ –≤ –Ω–∞–ª–∏—á–∏–∏", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info11 and 'info11' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info11)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–æ–ª–æ—Å—ã —á–∏—Å—Ç—ã–µ, –≤–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ø–ª–µ—á  –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–±—Ä–∞–Ω—ã (—Ö–≤–æ—Å—Ç, –ø—É—á–æ–∫).", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info12 and 'info12' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info12)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info12'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ú–∞–Ω–∏–∫—é—Ä - –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π, –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π, (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è  —Ñ—Ä–µ–Ω—á, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞, –æ—Ç—Ç–µ–Ω–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –∏ –±–æ—Ä–¥–æ–≤–æ–≥–æ, –±–µ–∑ —Ä–∏—Å—É–Ω–∫–æ–≤, –±–µ–∑ —Å—Ç—Ä–∞–∑). –î–ª–∏–Ω–∞ –Ω–æ–≥—Ç–µ–π - –Ω–µ –±–æ–ª–µ–µ 15 –º–º. ", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info13 and 'info13' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info13)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info13'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ú–∞–∫–∏—è–∂ (–¥–ª—è –¥–µ–≤—É—à–µ–∫):\n1) –ú–∞–∫–∏—è–∂: —É–º–µ—Ä–µ–Ω–Ω—ã–π, –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –≥–∞–º–º–µ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–ª–∞–∑–∞ –∏/–∏–ª–∏ –Ω–∞ –≥—É–±—ã.\n2) –ú–∞–∫–∏—è–∂ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π: –Ω–∞ –ª–∏—Ü–µ –Ω–µ—Ç —Å–ª–µ–¥–æ–≤ –æ—Å—ã–ø–∞–≤—à–∏—Ö—Å—è —Ç–µ–Ω–µ–π, —Ç—É—à–∏, –Ω–µ–∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞—Å—Ç—É—à–µ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info14 and 'info14' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info14)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info14'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ø—Ä–æ—â–∞–ª—Å—è —Å –í–∞–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –Ω–µ—Ç  –∏–ª–∏ —Å–∫–∞–∑–∞–ª –≤—ã –º–æ–∂–µ—Ç–µ –∫ –Ω–µ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è , –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã.", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info15 and 'info15' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info15)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info15'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.")
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info16 and 'info16' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMildebote.info16)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info16'] = message.text
    await FSMildebote.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –≤—ã–≥–ª—è–¥–µ–ª –æ–ø—Ä—è—Ç–Ω–æ: –æ–¥–µ—Ç –ø–æ —Ñ–æ—Ä–º–µ (—Ñ—É—Ç–±–æ–ª–∫–∞, –±—Ä—é–∫–∏, –ª—é–±–∞—è –æ–±—É–≤—å —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞). –û–¥–µ–∂–¥–∞ —á–∏—Å—Ç–∞—è, –Ω–µ –º—è—Ç–∞—è. –û–±—É–≤—å —á–∏—Å—Ç–∞—è. –ë–µ–π–¥–∂ –≤ –Ω–∞–ª–∏—á–∏–∏', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info17 and 'info17' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info17)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info17'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–æ–ª–æ—Å—ã —á–∏—Å—Ç—ã–µ, –≤–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ø–ª–µ—á  –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–±—Ä–∞–Ω—ã (—Ö–≤–æ—Å—Ç, –ø—É—á–æ–∫).", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info18 and 'info18' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info18)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info18'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ú–∞–Ω–∏–∫—é—Ä - –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π, –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π, (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è  —Ñ—Ä–µ–Ω—á, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞, –æ—Ç—Ç–µ–Ω–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –∏ –±–æ—Ä–¥–æ–≤–æ–≥–æ, –±–µ–∑ —Ä–∏—Å—É–Ω–∫–æ–≤, –±–µ–∑ —Å—Ç—Ä–∞–∑). –î–ª–∏–Ω–∞ –Ω–æ–≥—Ç–µ–π - –Ω–µ –±–æ–ª–µ–µ 15 –º–º. ", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info19 and 'info19' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info19)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info19'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ú–∞–∫–∏—è–∂ (–¥–ª—è –¥–µ–≤—É—à–µ–∫):\n1) –ú–∞–∫–∏—è–∂: —É–º–µ—Ä–µ–Ω–Ω—ã–π, –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –≥–∞–º–º–µ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–ª–∞–∑–∞ –∏/–∏–ª–∏ –Ω–∞ –≥—É–±—ã.\n2) –ú–∞–∫–∏—è–∂ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π: –Ω–∞ –ª–∏—Ü–µ –Ω–µ—Ç —Å–ª–µ–¥–æ–≤ –æ—Å—ã–ø–∞–≤—à–∏—Ö—Å—è —Ç–µ–Ω–µ–π, —Ç—É—à–∏, –Ω–µ–∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞—Å—Ç—É—à–µ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info20 and 'info20' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMildebote.info20)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info20'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ú–∞–∫–∏—è–∂ (–¥–ª—è –¥–µ–≤—É—à–µ–∫):\n1) –ú–∞–∫–∏—è–∂: —É–º–µ—Ä–µ–Ω–Ω—ã–π, –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –≥–∞–º–º–µ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–ª–∞–∑–∞ –∏/–∏–ª–∏ –Ω–∞ –≥—É–±—ã.\n2) –ú–∞–∫–∏—è–∂ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π: –Ω–∞ –ª–∏—Ü–µ –Ω–µ—Ç —Å–ª–µ–¥–æ–≤ –æ—Å—ã–ø–∞–≤—à–∏—Ö—Å—è —Ç–µ–Ω–µ–π, —Ç—É—à–∏, –Ω–µ–∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞—Å—Ç—É—à–µ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.", reply_markup=kastorama_kb)
    await FSMildebote.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMildebote.info21 and 'info21' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info20)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info20'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ø—Ä–æ—â–∞–ª—Å—è —Å –í–∞–º–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –Ω–µ—Ç  –∏–ª–∏ —Å–∫–∞–∑–∞–ª –≤—ã –º–æ–∂–µ—Ç–µ –∫ –Ω–µ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è , –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã.", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info21 and 'info21' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info21)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info21'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –∑–∞–∫–∞–∑ –≤ –ø–æ–ª–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–∞—à–∏–º–∏ –æ–∑–≤—É—á–µ–Ω–Ω—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏. –í —Ö–æ–¥–µ –∑–∞–∫–∞–∑–∞ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∫–∞–∫–∏—Ö-—Ç–æ –æ–≤–æ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –µ–¥–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª—É–∫, –æ–ª–∏–≤–∫–∏) –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–∏—Ö-—Ç–æ –æ–≤–æ—â–µ–π –ø–æ–±–æ–ª—å—à–µ. –¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫ —Å—ç–Ω–¥–≤–∏—á—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ —Å–æ—É—Å–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–æ—É—Å–∞ –í–∞–º –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å (–ø–æ–±–æ–ª—å—à–µ, –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, –ø–æ–º–µ–Ω—å—à–µ). –°–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å —Ç–∞–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ì–æ—Å—Ç—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º, —É—Ç–æ—á–Ω—è—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤—Å–µ –ª–∏ —Å–¥–µ–ª–∞–Ω–æ –≤–µ—Ä–Ω–æ.", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info22 and 'info22' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info21)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info21'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–æ—Ä—Ü–∏–∏ —Å—ã—Ä–∞ (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info22 and 'info22' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info22)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info22'] = message.text
    await FSMsubway.next()
    await message.answer('–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –í–∞–º —á–µ–∫', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info23 and 'info23' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info23)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info23'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–¥–∞—á—É, –µ—Å–ª–∏ –≤—ã —Ä–∞—Å–ø–ª–∞—á–∏–≤–∞–ª–∏—Å—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info24 and 'info24' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info24)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info24'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü–µ—Ä–µ—á–µ–Ω—å –±–ª—é–¥ –∏ —Å—É–º–º–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ —á–µ–∫–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info25 and 'info25' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info25)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info25'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞—Å—Å–∏—Ä –Ω–∞—á–∏—Å–ª–∏–ª –±–∞–ª–ª—ã –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info26 and 'info26' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info26)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info26'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª–æ–∫—É ¬´–ö—É–ª—å—Ç—É—Ä–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è¬ª. –û–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—á–µ—Ç–∞. –ß—Ç–æ –≤ —Ä–∞–±–æ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –Ω–µ—Ç. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info27 and 'info27' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info27)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info27'] = message.text
    await FSMsubway.next()
    await message.answer('–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–æ–Ω–µ –∑–∞–∫–∞–∑–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å—ç–Ω–¥–≤–∏—á–µ–π) –∏ –¥–µ—Å–µ—Ä—Ç—ã –≤ –∫–∞—Å—Å–æ–≤–æ–π –∑–æ–Ω–µ —Å–≤–µ–∂–∏–µ, –≤—ã–ª–æ–∂–µ–Ω—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info28 and 'info28' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info28)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info28'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í –∑–æ–Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –ø—É—Å—Ç—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", reply_markup=kastorama_kb)
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info29 and 'info29' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMsubway.info29)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info29'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ö–∞–∫–æ–π –≤–∏–¥ —Å–∞–ª–∞—Ç–∞ (–∫–∞–ø—É—Å—Ç—ã) –±—ã–ª –≤ –∑–æ–Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –û–≤–æ—â–Ω–æ–π —Å–µ–∫—Ü–∏–∏")
    await FSMsubway.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info30 and 'info30' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info30)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info30'] = message.text
    await FSMsubway.next()
    await message.answer('–ë—ã–ª–∏ –ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∫ —Å—ç–Ω–¥–≤–∏—á—É?')
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info31 and 'info31' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMsubway.info31)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info31'] = message.text
    await FSMsubway.next()
    await message.answer('–ï—Å–ª–∏ –≤—ã –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ —Å—ç–Ω–¥–≤–∏—á –ø–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–º, –º—è—Å–Ω–∞—è –Ω–∞—á–∏–Ω–∫–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≥—Ä–µ—Ç–æ–π', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMsubway.info32 and 'info32' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMtorti.info1)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info1'] = message.text
    await FSMtorti.next()
    await message.answer("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞")

@dp.message_handler(state=FSMtorti.info2, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMtorti.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info3 and 'info3' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMtorti.info3, content_types=types.ContentType.PHOTO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info3'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMtorti.next()
    await message.answer('–í–Ω–µ—à–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: –°–≤–µ—Ç–æ–≤–∞—è –≤—ã–≤–µ—Å–∫–∞, —Ä–µ–∫–ª–∞–º–∞, –≤—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏, –∫—Ä—ã–ª—å—Ü–æ - –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π, –≤—Å—ë —á–∏—Å—Ç–æ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info4 and 'info4' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info4)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info4'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏. –û—Å–≤–µ—â–µ–Ω–∏–µ, —Ç–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —É–≥–æ–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è - –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π, –≤—Å—ë —á–∏—Å—Ç–æ, –Ω–µ—Ç –∑–∞–ø–∞—Ö–∞", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info5 and 'info5' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info5)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info5'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ —Ñ–æ—Ä–º–µ, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, –≤–æ–ª–æ—Å—ã —Å–æ–±—Ä–∞–Ω—ã, —Ä—É–∫–∏ —á–∏—Å—Ç—ã–µ", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info6 and 'info6' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info6)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info6'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–∞–Ω—è—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π. –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç –ø–æ –ª–∏—á–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–µ –ø—å—é—Ç/–Ω–µ –µ–¥—è—Ç –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info7 and 'info7' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info7)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info7'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –∑–∞—Ç–µ–º –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –≤—ã–∫–ª–∞–¥–∫–æ–π —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏–µ–º–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ —Ç–¥", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info8 and 'info8' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info8)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info8'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ —Å–∏–¥—è—Ç –≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –Ω–µ –æ–ø–∏—Ä–∞—é—Ç—Å—è –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑—ã –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info9 and 'info9' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info9)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info9'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ù–µ—Ç –∫—É—Ä—è—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —É–ª–∏—Ü–µ –≤ –º–æ–º–µ–Ω—Ç –≤–∞—à–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info10 and 'info10' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info10)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info10'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–µ–ª —Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –≤–µ—Ä–Ω—É–ª—Å—è —Å —É–ª–∏—Ü—ã –∏–ª–∏ —Ç.–ø, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–º—ã–ª —Ä—É–∫–∏ (–ø—Ä–æ—Ç–µ—Ä –≤–ª–∞–∂–Ω–æ–π —Å–∞–ª—Ñ–µ—Ç–∫–æ–π) –∏–ª–∏ –æ–¥–µ–ª –ø–µ—Ä—á–∞—Ç–∫–∏", reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info11 and 'info11' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info11)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ª–æ–≥–∏—á–Ω–∞—è, –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç –≤ –≤–∏—Ç—Ä–∏–Ω–∞—Ö. –¶–µ–Ω–Ω–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º—è—Ç—ã–µ, "—Ä—É—á–Ω—ã–µ" —Ü–µ–Ω–Ω–∏–∫–∏.', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info12 and 'info12' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info12)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info12'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–¥–æ—Ä–æ–≤–∞—é—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –≤–æ—à–µ–¥—à–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info13 and 'info13' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info13)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info13'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info14 and 'info14' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info14)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info14'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–Ω—è—Ç —Ä–∞–±–æ—Ç–æ–π —Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –æ–±—Ä–∞—â–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–Ω–æ–≤—å –≤–æ—à–µ–¥—à–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info15 and 'info15' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info15)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info15'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Å–æ–±–ª—é–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç - –ü—Ä–µ–¥–ª–∞–≥–∞—é—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º —Å –∫–∞—Å—Å', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info16 and 'info16' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info16)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info16'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–†–∞–±–æ—Ç–∞ –Ω–∞ –∫–∞—Å—Å–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è. –ù–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ–Ω–∞ –∏ –¥—Ä)', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info17 and 'info17' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info17)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info17'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ê–∫—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –Ω–æ–≤–∏–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ. –í—ã–ª–æ–∂–µ–Ω—ã –≤ —Ç–æ—Ä–≥–æ–≤–æ–≤–æ–º –∑–∞–ª–µ.', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info18 and 'info18' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info18)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info18'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü–µ—Ä—Å–æ–Ω–∞–ª –¥–æ–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –¥–æ –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ . –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–∫—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞—è –≤—ã–≥–æ–¥—É –ø–æ–∫—É–ø–∫–∏', reply_markup=kastorama_kb)
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info19 and 'info19' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMtorti.info19)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info19'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ò—Å—Ö–æ–¥—è –∏–∑ –í–∞—à–µ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ, —Å –∫–∞–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é (–æ—Ç 0 –¥–æ 10) –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –µ–≥–æ —Å–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º –∏ –∑–Ω–∞–∫–æ–º—ã–º? –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ–π –æ—Ç–≤–µ—Ç')
    await FSMtorti.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMtorti.info20 and 'info20' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMtorti.info20)
async def add_check(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info20'] = message.text
        await base.add_log(message.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "torti")
    await base.add_check("torti", state)
    await message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

@dp.message_handler(state=FSMdomix.info1)
async def getting_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info1'] = message.text
    await FSMdomix.next()
    await message.answer("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞")

@dp.message_handler(state=FSMdomix.info2, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMdomix.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info3 and 'info3' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMdomix.info3, content_types=types.ContentType.PHOTO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info3'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMdomix.next()
    await message.answer('–§–ò–û –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info4 and 'info4' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMdomix.info4)
async def getting_consultant_fitting(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info4'] = message.text
        await message.answer("–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞. –ê–∫—Ü–µ–Ω—Ç –¥–µ–ª–∞–π—Ç–µ –Ω–∞ —Ç–æ–º, —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª –∏ –∫–∞–∫ –≤—ë–ª —Å–µ–±—è –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–∞–∫ –ø—Ä–æ—è–≤–ª—è–ª–∞—Å—å –µ–≥–æ –∫–æ–º–ø–µ–Ω—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–µ.")
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info5 and 'info5' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMdomix.info5)
async def getting_consultant_fitting(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info5'] = message.text
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ª–∞: —á–∏—Å—Ç–æ, –º—É—Å–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ —Å —Ç–µ–ª–µ–∂–∫–æ–π, –≤–µ–∑–¥–µ –µ—Å—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏", reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info6 and 'info6' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info6)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info6'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ü—Ä–æ–¥–∞–≤–µ—Ü —Å –±–µ–π–¥–∂–µ–º, —Ñ–æ—Ä–º–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, —á–∏—Å—Ç–∞—è, –≤—ã–≥–ª–∞–∂–µ–Ω–Ω–∞—è.", reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info7 and 'info7' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info7)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info7'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–ë—ã–ª –ª–∏ –∑–∞–Ω—è—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü?", reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info8 and 'info8' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info8)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info8'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–†–∞–∑–ª–æ–∂–∏–ª –Ω–∞ –ø–æ–ª—É –Ω–∞–ø–æ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É–ª –æ–±–æ–∏, –Ω–∞—Ä–∏—Å–æ–≤–∞–ª –ø–ª–∏—Ç–∫—É –≤ Ceramic 3D. ", reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info9 and 'info9' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info9)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info9'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–†–∞—Å—Å–∫–∞–∑–∞–ª –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏/–ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞", reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info10 and 'info10' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info10)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info10'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer("–†–∞—Å—Å–∫–∞–∑–∞–ª –æ —Ç—Ä–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –Ω–∞ —è–∑—ã–∫–µ –≤—ã–≥–æ–¥—ã", reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info11 and 'info11' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info11)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–†–∞—Å—Å—á–∏—Ç–∞–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info12 and 'info12' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info12)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info12'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ï—Å–ª–∏ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É: –¥–∞–ª –≤–∏–∑–∏—Ç–∫—É, —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–∞–π—Ç–µ, –≤–∑—è–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info13 and 'info13' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info13)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info13'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É', reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info14 and 'info14' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info14)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info14'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É, —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ª—É—á—à–µ–π —Ü–µ–Ω—ã', reply_markup=kastorama_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info15 and 'info15' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info15)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info15'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ 1 - –≥—Ä—É–±—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, 5 - –æ—á–µ–Ω—å –≤–µ–∂–ª–∏–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫', reply_markup=grade31_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info16 and 'info16' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info16)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info16'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ 1 - –ø–∞—Å—Å–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, 5 - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π –≤ –ø—Ä–æ–¥–∞–∂–µ', reply_markup=grade31_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info17 and 'info17' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info17)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info17'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ 1 - —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, 5 - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è, –ø–æ–Ω—è—Ç–Ω–∞—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è', reply_markup=grade31_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info18 and 'info18' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info18)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info18'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ 1 - –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—Å—É–∂–∏–≤–∞–Ω–∏–µ, 5 - –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', reply_markup=grade31_kb)
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info19 and 'info19' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info19)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info19'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ 1 - –Ω–µ–æ–ø—Ä—è—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –æ–¥–µ–∂–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∏–ª—é, 5 - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –æ–¥–µ—Ç –ø–æ —Ñ–æ—Ä–º–µ')
    await FSMdomix.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMdomix.info20 and 'info20' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMdomix.info20)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info20'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await base.add_log(call.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "domix")
    await base.add_check("domix", state)
    await call.message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

@dp.message_handler(state=FSMinformat.info1)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info1'] = message.text
        await message.answer("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info2 and 'info2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info2, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info2'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMinformat.next()
    await message.answer('–§–æ—Ç–æ —á–µ–∫–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info3 and 'info3' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info3, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info3'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMinformat.next()
    await message.answer('–§–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞')
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info4 and 'info4' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info4, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info4'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMinformat.next()
    await message.answer('–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏')
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info5 and 'info5' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info5)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info5'] = message.text
        await message.answer("–ö–æ–≥–¥–∞ –í—ã –≤–æ—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, —Å –í–∞–º–∏ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è –∫—Ç–æ-–ª–∏–±–æ –∏–∑ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç (–µ—Å–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü—ã –Ω–µ –∑–∞–Ω—è—Ç—ã —Å –¥—Ä—É–≥–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º)?\n –ü—Ä–æ–¥–∞–≤–µ—Ü –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–ª—ã–±–Ω—É–ª—Å—è –í–∞–º?\n –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –í–∞–º –ø–æ–º–æ—â—å?")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info6 and 'info6' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info6)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info6'] = message.text
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –í–∞—à–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏?", reply_markup=kastorama_kb)
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info7 and 'info7' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMinformat.info7)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info7'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–Ω–∏–º–∞–µ—Ç —Ç–æ–≤–∞—Ä —Å –≤–∏—Ç—Ä–∏–Ω—ã, –¥–µ—Ä–∂–∏—Ç –µ–≥–æ –≤ —Ä—É–∫–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ —Ä—É–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é?', reply_markup=kastorama_kb)
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info8 and 'info8' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMinformat.info8)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info8'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–ª–∞–¥–µ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ (–Ω–µ —á–∏—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —ç—Ç–∏–∫–µ—Ç–∫–∏)?', reply_markup=kastorama_kb)
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info9 and 'info9' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMinformat.info9)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info9'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–∞—Å—Å–∏—Ä –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–ª —Ä–∞—Å—á–µ—Ç?', reply_markup=kastorama_kb)
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info10 and 'info10' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMinformat.info10)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info10'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ö–∞—Å—Å–∏—Ä –≤—ã–¥–∞–ª –í–∞–º —á–µ–∫?', reply_markup=kastorama_kb)
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info11 and 'info11' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMinformat.info11)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü–µ—Ä—Å–æ–Ω–∞–ª (–∫–∞—Å—Å–∏—Ä, –ø—Ä–æ–¥–∞–≤–µ—Ü) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –í–∞–º–∏?', reply_markup=kastorama_kb)
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info12 and 'info12' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMinformat.info12)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info12'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í–∏—Ç—Ä–∏–Ω—ã —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω—ã, –≤—Å–µ –ª–∞–º–ø—ã –≥–æ—Ä—è—Ç?\n–ù–∞ –≤–∏—Ç—Ä–∏–Ω–µ –∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?\n –ö–∞–∫–∏–µ –ø–ª–∞–∫–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã?\n–°–æ–±–ª—é–¥–µ–Ω–∞ —á–∏—Å—Ç–æ—Ç–∞ –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–µ (–Ω–µ—Ç –ø—ã–ª–∏, —á–∏—Å—Ç—ã–π –ø–æ–ª, —Å—Ç–µ–∫–ª–æ –±–µ–∑ –≥—Ä—è–∑–∏ –∏ —Ä–∞–∑–≤–æ–¥–æ–≤, —Å–ª–µ–¥–æ–≤ —Å–∫–æ—Ç—á–∞)?')
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info13 and 'info13' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info13)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info13'] = message.text
        await message.answer("–í—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —á–∏—Å—Ç–æ—Ç–µ?\n–¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ (–Ω–µ –ø–æ—Ä–≤–∞–Ω, –Ω–µ –∏–º–µ–µ—Ç –∑–∞–ª–æ–º–æ–≤, –≥—Ä—è–∑–∏, –ø—ã–ª–∏ –∏ –ø—Ä.)?\n–ù–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–Ω–∏–∫?\n–ï—Å–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å–Ω–∏–∂–µ–Ω–∞ —Ü–µ–Ω–∞, —ç—Ç–æ –ª–µ–≥–∫–æ –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –ø–æ —Ü–µ–Ω–Ω–∏–∫—É (—Ü–µ–Ω–Ω–∏–∫ –∫—Ä–∞—Å–Ω–æ–≥–æ/–∂–µ–ª—Ç–æ–≥–æ/–æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç–æ–π —Ü–µ–Ω–æ–π)?\n–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ —á–∏—Å—Ç–æ–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—ã–ª—å?\n–ù–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏ –ø—É—Å—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)?\n–û—Å–≤–µ—â–µ–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –≤—Å–µ –ª–∞–º–ø—ã –≤ –∏—Å–ø—Ä–∞–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏?")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info14 and 'info14' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info14)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info14'] = message.text
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –æ–ø—Ä—è—Ç–Ω–æ?\n–£ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –≤–∏–¥–µ–ª–∏, –±—ã–ª–∏ –±–µ–π–¥–∂–∏ —Å –∏–º–µ–Ω–µ–º?\n–í–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º?\n–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –º–∞—Å–∫–∞—Ö –∏ –ø–µ—Ä—á–∞—Ç–∫–∞—Ö?")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info15 and 'info15' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info15)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info15'] = message.text
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –¥–µ–ª–∞–º–∏, –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç –Ω–∞ –ª–∏—á–Ω—ã–µ —Ç–µ–º—ã, –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–µ –∂—É—é—Ç –∂–µ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ä–µ–∑–∏–Ω–∫—É –∏ –ø—Ä.?\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å?")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info16 and 'info16' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info16)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info16'] = message.text
        await message.answer("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –í—ã —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º/–∑–Ω–∞–∫–æ–º—ã–º/—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º? –û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 10 ‚Äì –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info17 and 'info17' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info17)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info17'] = message.text
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤—ã–≥–ª—è–¥—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞? –û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 10 ‚Äì –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.")
    await FSMinformat.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMinformat.info18 and 'info18' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMinformat.info18)
async def getting_consultant_fitting(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info18'] = message.text
        await message.answer(f"–°–ø–∞—Å–∏–±–æ. –ê–Ω–∫–µ—Ç–∞ - {data_check['number']} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        await base.add_check("informat", data_check)
        await base.add_log(message.from_user.id, data_check['number'], "–í—ã–ø–æ–ª–Ω–∏–ª", "informat")
    await state.finish()

@dp.message_handler(state=FSMlexmer.info1)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info1'] = message.text
        await message.answer("–í—Ä–µ–º—è –≤—Ö–æ–¥–∞")
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info2 and 'info2' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info2)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info2'] = message.text
        await message.answer("–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –≤–∏–∑–∏—Ç–∞")
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info3 and 'info3' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info3, content_types=types.ContentType.AUDIO)
async def getting_audio(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info3'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.audio.file_id))["file_path"]}'
    await FSMlexmer.next()
    await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ')
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info4 and 'info4' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info4)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info4'] = message.text
        await message.answer("–§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞")
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info5 and 'info5' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info5)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info5'] = message.text
        await message.answer("–ù–∞–ª–∏—á–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Ñ–æ—Ä–º—ã –∏ –±–µ–π–¥–∂–∞", reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info6 and 'info6' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info6)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info6'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info7 and 'info7' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info7)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info7'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info8 and 'info8' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info8)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info8'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ó–∞ —Ä–µ—Å–µ–ø—à–µ–Ω (—Å—Ç–æ–ª–æ–º) –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info9 and 'info9' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info9)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info9'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤—Ü—ã, –Ω–µ –∑–∞–Ω—è—Ç—ã–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–º—É –∑–∞–ª—É', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info10 and 'info10' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info10)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info10'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–µ–¥–∞–ª–µ–∫–æ –æ—Ç –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç) –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info11 and 'info11' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info11)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info11'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5-–∏ —Å–µ–∫—É–Ω–¥', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info12 and 'info12' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info12)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info12'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø—Ä–∏–≤–µ—Ç–ª–∏–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞, –æ–Ω —É–ª—ã–±–∞–µ—Ç—Å—è, –ø–æ–∑–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info13 and 'info13' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info13)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info13'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç–ª–∏–≤–æ, –≥—Ä–æ–º–∫–æ, –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info14 and 'info14' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info14)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info14'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤–æ–∑–ª–µ –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 15 —Å–µ–∫—É–Ω–¥.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info15 and 'info15' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info15)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info15'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü —Å—Ç–æ–∏—Ç –Ω–∞–ø—Ä–æ—Ç–∏–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–ª–µ–≤–∞ –æ—Ç –Ω–µ–≥–æ', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info16 and 'info16' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info16)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info16'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ç–æ–≤–∞—Ä —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º: –∏–∑–¥–µ–ª–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–µ—à–µ–Ω—ã —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –Ω–∞ –º–µ—Å—Ç–µ, –æ—Ç–≤–æ—Ä–∞—á–∏–≤–∞—è –ø–æ–ª–∫—É, –æ—Ç–≥–∏–±–∞—è –≤–æ—Ä–æ—Ç–Ω–∏–∫ –∏ —Ç.–ø.,—Å–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–µ—â–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç) –∏–ª–∏ –¥–µ—Ä–∂–∞–ª –≤–µ—â—å –≤ —Ä—É–∫–∞—Ö.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info17 and 'info17' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info17)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info17'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–ª –≤–∞–º —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—à–∏–≤–∞ –∏–ª–∏ –ø–æ–∫–∞–∑–∞–ª –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–¥–µ–ª–∫–∏)', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info18 and 'info18' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info18)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info18'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü–µ—Ä–µ–¥ –ø—Ä–∏–º–µ—Ä–∫–æ–π –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–¥–µ–ª–∏—è ‚Äî —Å–Ω–∏–º–∞–µ—Ç —Å –≤–µ—à–∞–ª–∫–∏, —Ä–∞—Å—Å—Ç—ë–≥–∏–≤–∞–µ—Ç –ø—É–≥–æ–≤–∏—Ü—ã, –º–æ–ª–Ω–∏–∏.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info19 and 'info19' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info19)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info19'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü —Å–ø—Ä–æ—Å–∏–ª –≤–∞—Å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –ª–∏ –≤–∞–º, —É–¥–æ–±–Ω–∞ –ª–∏ –ø–æ—Å–∞–¥–∫–∞, –Ω—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º, –∫–∞–∫ —Å–∏–¥–∏—Ç –º–æ–¥–µ–ª—å.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info20 and 'info20' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info20)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info20'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–µ–¥–ª–∞–≥–∞–ª/–ø—Ä–∏–Ω–æ—Å–∏–ª –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏–º–µ—Ä–∫–∏.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info21 and 'info21' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info21)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info21'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í–æ–∑–Ω–∏–∫–ª–æ –ª–∏ —É –≤–∞—Å –∂–µ–ª–∞–Ω–∏–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ—Å–ª–µ –±–µ—Å–µ–¥—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏?', reply_markup=grade31_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info22 and 'info22' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info22)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info22'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ –ª–∏ –≤—ã –¥—Ä—É–∑—å—è–º –∏ –∑–Ω–∞–∫–æ–º—ã–º –ø—Ä–∏–π—Ç–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω?', reply_markup=grade31_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info23 and 'info23' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info23)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info23'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ —á—Ç–æ —Å–ª–µ–¥–æ–≤–∞–ª–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤ –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ? –ù–µ –º–µ–Ω–µ–µ 3—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.')
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info24 and 'info24' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info24)
async def getting_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info24'] = message.text
        await message.answer("–§–æ—Ç–æ —Ñ–∞—Å–∞–¥–∞")
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info25 and 'info25' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info25, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info25'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMlexmer.next()
    await message.answer('–§–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π')
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info26 and 'info26' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.message_handler(state=FSMlexmer.info26, content_types=types.ContentType.PHOTO)
async def getting_photo1(message: types.Message, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info26'] = f'https://api.telegram.org/file/bot5794915534:AAHb-BgGHR5eE3szwUsNYuyPKQ1x4CJaZBY/{(await bot.get_file(message.photo[-1].file_id))["file_path"]}'
    await FSMlexmer.next()
    await message.answer('–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –æ–∫–æ–ª–æ –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω —á–∏—Å—Ç–∞—è (—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–∞–≥–∞–∑–∏–Ω –≤–Ω—É—Ç—Ä–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞), –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º—É—Å–æ—Ä, –≥—Ä—è–∑—å –∏ —è–≤–Ω–∞—è –ø—ã–ª—å', reply_markup=kastorama_kb)
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info27 and 'info27' not in (await state.get_data()).keys():
        await message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")


@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info27)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info27'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í—ã–≤–µ—Å–∫–∞ - —á–∏—Å—Ç–∞—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–µ—Ç –ø—ã–ª–∏ –∏ —Å–ª–µ–¥–æ–≤ –≥—Ä—è–∑–∏). –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info28 and 'info28' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info28)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info28'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í–∏—Ç—Ä–∏–Ω—ã —É –≤—Ö–æ–¥–∞ –∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–≤–µ—Ä–∏ —á–∏—Å—Ç—ã–µ –∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–µ–∑ —Å–ª–µ–¥–æ–≤ –ø—ã–ª–∏, –∫–ª–µ–π–∫–æ–π –ª–µ–Ω—Ç—ã –∏–ª–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ø–∞–ª—å—Ü–µ–≤, –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –Ω–∞–¥–ø–∏—Å–µ–π)', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info29 and 'info29' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info29)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info29'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∞ –≤—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å—Ç—å —Ç–∞–±–ª–∏—á–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info30 and 'info30' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info30)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info30'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í—Å–µ –º–∞–Ω–µ–∫–µ–Ω—ã –≤ –≤–∏—Ç—Ä–∏–Ω–∞—Ö –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–¥–µ—Ç—ã', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info31 and 'info31' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info31)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info31'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∞ –∫–∞–∂–¥—ã–π –º–∞–Ω–µ–∫–µ–Ω –≤ –≤–∏—Ç—Ä–∏–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω —Ü–µ–Ω–Ω–∏–∫', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info32 and 'info32' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info32)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info32'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í—Å–µ –ª–∞–º–ø—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤–∏—Ç—Ä–∏–Ω—ã –∏—Å–ø—Ä–∞–≤–Ω—ã', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info33 and 'info33' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info33)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info33'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∞ –∞–Ω—Ç–∏–∫—Ä–∞–∂–Ω—ã—Ö –≤–æ—Ä–æ—Ç–∞—Ö —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –º–∞–Ω–µ–∫–µ–Ω–∞–º–∏, –±—É–º–∞–≥–æ–π –∏ —Ç.–¥.', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info34 and 'info34' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info34)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info34'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í–∏—Ç—Ä–∏–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–æ–π—Ç–∏ –∫ –Ω–µ–π, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–¥–µ–ª–∏, –∑–∞–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info35 and 'info35' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info35)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info35'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü–æ–ª —á–∏—Å—Ç—ã–π, –Ω–∞ –ø–æ–ª—É –Ω–µ—Ç –º—É—Å–æ—Ä–∞', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info36 and 'info36' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info36)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info36'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ü–æ–ª–∫–∏ –∏ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–∏—Å—Ç—ã–µ (–Ω–µ—Ç –ø—ã–ª–∏, –ø–æ–¥—Ç–µ–∫–æ–≤, —Ä–∞–∑–≤–æ–¥–æ–≤)', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info37 and 'info37' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info37)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info37'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°—Ç–æ–ª—ã –∏ —Ä–µ—Å–µ–ø—à–Ω —á–∏—Å—Ç—ã–µ –±–µ–∑ –ø–æ–¥—Ç–µ–∫–æ–≤ —Ä–∞–∑–≤–æ–¥–æ–≤', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info38 and 'info38' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info38)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info38'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ó–µ—Ä–∫–∞–ª–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ —á–∏—Å—Ç—ã–µ –∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–±–æ–ª—å—à–∏–µ –Ω–∞—Å—Ç–µ–Ω–Ω—ã–µ –∑–µ—Ä–∫–∞–ª–∞ –≤ –∑–∞–ª–µ –∏ –≤ –ø—Ä–∏–º–µ—Ä–æ—á–Ω—ã—Ö)', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info39 and 'info39' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info39)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info39'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–¢–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏—Å–ø—Ä–∞–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info40 and 'info40' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info40)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info40'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∞ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è, –Ω–∞–ø–∏—Ç–∫–∏, –ª–∏—á–Ω—ã–µ –≤–µ—â–∏', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info41 and 'info41' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info41)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info41'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ú—É—Å–æ—Ä–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞ –≤–∏–¥—É', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info42 and 'info42' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info42)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info42'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–†–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info43 and 'info43' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info43)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info43'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í–∫–ª—é—á–µ–Ω–æ –≤—Å—ë –ø–æ—Ç–æ–ª–æ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info44 and 'info44' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info44)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info44'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–¢–æ–≤–∞—Ä –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏, –ø—É—Å—Ç–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info45 and 'info45' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info45)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info45'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–¶–µ–Ω–Ω–∏–∫–∏: –Ω–∞–ª–∏—á–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—É, –Ω–µ –º—è—Ç—ã–µ, —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞—é—Ç—Å—è', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info46 and 'info46' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info46)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info46'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –≤ –ø—Ä–æ—Ö–æ–¥–∞—Ö –Ω–µ —Å—Ç–æ—è—Ç –∫–æ—Ä–æ–±–∫–∏ –∏ –ø—Ä–æ—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–µ—à–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—é –ø–æ –∑–∞–ª—É', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info47 and 'info47' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info47)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info47'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ú–∞–≥–∞–∑–∏–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info48 and 'info48' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info48)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info48'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–í –ø—Ä–∏–º–µ—Ä–æ—á–Ω—ã—Ö –µ—Å—Ç—å: –ø—É—Ñ–∏–∫, —á–∏—Å—Ç—ã–π –∫–æ–≤—Ä–∏–∫, –∫—Ä—é—á–∫–∏ –¥–ª—è —Å—É–º–æ–∫', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info49 and 'info49' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info49)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info49'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∏–∫—Ç–æ –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –ø–∏—â—É –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –∑–∞–ª–µ', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info50 and 'info50' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info50)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info50'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∏–∫—Ç–æ –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –∂–µ–≤–∞–ª –∂–µ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ä–µ–∑–∏–Ω–∫—É', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info51 and 'info51' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info51)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info51'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –¥–µ–ª–∞–º–∏, —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π, –≤ —Ç.—á. –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info52 and 'info52' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info52)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info52'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—ã', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info53 and 'info53' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info53)
async def getting_consultant_fitting(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info53'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await call.message.answer('–ù–∏–∫—Ç–æ –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –æ–±–ª–æ–∫–∞—á–∏–≤–∞–ª—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Ä–µ—Å–µ–ø—à–µ–Ω, –≤–µ—à–∞–ª–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞)', reply_markup=kastorama_kb)
    await FSMlexmer.next()
    await asyncio.sleep(300)
    if await state.get_state() == FSMlexmer.info54 and 'info54' not in (await state.get_data()).keys():
        await call.message.answer("–í—ã —Ç—É—Ç? –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É")

@dp.callback_query_handler(Text(startswith="grade_"), state=FSMlexmer.info54)
async def getting_date(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data_check:
        data_check['info54'] = call.data.split("_")[1]
        await call.message.edit_text(call.message.text + "\n\n<b>‚úÖ–û—Ü–µ–Ω–µ–Ω–æ</b>")
        await base.add_log(call.from_user.id, data_check['number'], '–í—ã–ø–æ–ª–Ω–∏–ª', "lexmer")
    await base.add_check("lexmer", state)
    await call.message.answer(f'–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ {data_check["number"]} -- –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!', reply_markup=main_kb)
    await state.finish()

